#version 430

#define work_group_size 256u

layout( local_size_x = work_group_size ) in;

layout( push_constant ) uniform params {
  uint len;
} PushConstant;

layout(std430, binding = 0) buffer inputBuffer
{
    float InputBuffer[];
};

layout(std430, binding = 1) buffer outputScans
{
    float OutputScans[];
};

layout(std430, binding = 2) buffer outputSums
{
    float OutputSums[];
};

shared float cache[work_group_size];

void main() 
{
    uint gid = gl_GlobalInvocationID.x;
    uint lid = gl_LocalInvocationID.x;
    uint wgid = gl_WorkGroupID.x;

    cache[lid] = InputBuffer[gid];
    barrier();

    // sum tree
    int offset = 1;
    uint n = min(PushConstant.len, work_group_size);
    for (uint d = n >> 1; d > 0; d >>= 1) {
        barrier();
        if (lid < d) {
            uint ai = offset * (2 * lid + 1) - 1;
            uint bi = offset * (2 * lid + 2) - 1;
            cache[bi] += cache[ai];
        }
        offset <<= 1;
    }
    barrier();

    // saving work-group sum
    if (lid == 0) {
        OutputSums[wgid] = cache[n-1];
        cache[n-1] = 0;
    }

    // scan result
    for (int d = 1; d < n; d <<= 1) {
        barrier();
        offset >>= 1;
        if (lid < d) {
            uint ai = offset * (2 * lid + 1) - 1;
            uint bi = offset * (2 * lid + 2) - 1;
            
            float t    = cache[ai];
            cache[ai]  = cache[bi];
            cache[bi] += t;
        }
    }

    if (gid < PushConstant.len) {
        OutputScans[gid] = cache[lid];
    }
}